;-----------------------------
; Visual odometry params
;-----------------------------
[RECTIFY]
nOctaves				= 1 		// [int] (def:8) -- Number of octaves (1 for ORB)		 

[DETECT]
; GENERAL
detect_method			= 0			// [int] (def:0) -- Method to detect keypoints: [0] ORB ; [1] FAST (one-scale) + ORB descriptors ; [2] FASTER ; [3] KLT 
min_distance 			= 5			// [int] (def:3) -- The allowed minimun distance (in pixels) between features

; FAST
; target_feats_per_pixel	= 5			// [double] (def:0.001) -- Desired number of features per square pixel [ONLY FOR 'FASTER' METHOD]
; initial_FAST_threshold 	= 20		// [int] (def:20) -- Initial FAST threshold (between 10-30 is a good value) [THIS IS CONSTANT TO 20 FOR 'ORB' WITH OPENCV < 3.0]
; fast_min_th				= 5			// [int] (def:5) -- Minimum limit for the FAST (within ORB) detector (dynamic) threshold [UNUSED WITH OPENCV<3.0]
; fast_max_th				= 30		// [int] (def:30) -- Maximum limit for the FAST (within ORB) detector (dynamic) threshold [UNUSED WITH OPENCV<3.0]

; KLT
; KLT_win					= 4			// [int] (def:4) -- Window for the KLT response evaluation
; minimum_KLT_response 	= 10		// [int] (def:10) -- Minimum KLT response to not to discard a feature as being in a textureless zone

; ORB
 orb_nfeats 				= 2000		// [int] (def:500) -- Number of ORB features to be detected
; orb_nlevels				= 1			// [int] (def:8) -- The number of pyramid levels for the ORB detector
; minimum_ORB_response 	= 0			// [double] (def:0) -- Minimum ORB response [Harris response] to not to discard a feature as being in a textureless zone

; NON-MAX-SUP
non_maximal_suppression	= true 		// [bool] (def:true) -- Enable/disable the non-maximal suppression after the detection (5x5 windows is used)
non_max_supp_method		= 1			// [int] (def:0) -- Method to perform non maximal suppression: [0] Standard ; [1] Adaptive

[MATCH]
; GENERAL
; match_method 		= 0				// [int] (def:2) -- Method to perform stereo matching: [0] DescBF ; [1] DescRbR ; [2] SAD
max_y_diff			= 2 			// [int] (def:0) -- Maximum allowed distance in pixels from the same row in the images for corresponding feats
enable_robust_1to1_match = false 	// [bool] (def:false) -- Only match if a pair of L/R features have the best match score to each other
rectified_images	= true 			// [bool] (def:false) -- Stereo images are rectified (corresponding pairs are in the same row)
; min_z				= 60			// [double] (def:5) -- Min value for the Z coordinate of 3D feature to be considered (reject too close features) [UNUSED]
; max_z				= 0.15			// [double] (def:0.3) -- Max value for the Z coordinate of 3D feature to be considered (reject too far features) [UNUSED]

; SAD LIMITS
sad_max_distance	= 2000			// [int] (def:200) -- The maximum SAD value to consider a pairing as a potential match
; sad_max_ratio		= 0.5			// [double] (def:0.5) -- The maximum ratio between the two smallest SAD when searching for pairings

; ORB LIMITS
; orb_min_th			= 30			// [int] (def:30) -- Minimum limit for the ORB matching threshold (dynamic ORB matching limits)
; orb_max_th			= 80			// [int] (def:100) -- Maximum limit for the ORB matching threshold (dynamic ORB matching limits)
orb_max_distance	= 60 			// [int] (def:40) -- Maximum allowed Hamming distance between a pair of features to be considered a match

[IF-MATCH]
; GENERAL
; if_match_method		= 0 			// [int] (def:0) -- Inter-frame matching method: [0] DescBF ; [1] DescWin ; [2] SAD ; [3] OpticalFlow
filter_fund_matrix	= true 			// [bool] (def:) -- Whether or not use fundamental matrix to remove outliers between inter-frame matches	

; WINDOW LIMITS
window_height		= 16			// [int] (def:) -- Window size for searching for inter-frame matches
window_width		= 16			// [int] (def:) -- Window size for searching for inter-frame matches

; SAD LIMITS
;sad_max_distance	= 400
sad_max_ratio		= 0.5			// [double] (def:0.5) -- The maximum ratio between the two smallest SAD when searching for pairings

; ORB LIMITS -- the same values as for stereo-matching are employed

[LEAST-SQUARES]
; std_noise_pixels	= 1				// [double] (def:1) -- The standard deviation assumed for feature coordinates

initial_max_iters	= 30			// [int] (def:10) -- Maximum number of iterations for the initial stage
max_iters			= 30			// [int] (def:100) -- Final maximum number of iterations for the refinement stage
max_incr_cost		= 3				// [int] (def:3) -- Maximum allowed number of times the cost can grow
residual_threshold	= 15			// [double] (def:1) -- Residual threshold for detecting outliers
min_mod_out_vector 	= 0.001			// [double] (def:0.001) -- Minimum modulus of the step output vector to continue iterating (ending condition)

bad_tracking_th		= 5				// [int] (def:) -- Minimum number of tracked features to yield a tracking error

use_robust_kernel	= true			// [bool] (def:true) -- Set/Unset using robust kernel for optimization
kernel_param		= 2				// [double] (def:3) -- Robust kernel parameter (pseudo-Huber)

da_stage2_method 	= 3

use_previous_pose_as_initial = true // [bool] (def:true) -- Use the previous computed pose as the initial one for the next frame

[GUI]
show_gui			= false			// [bool] (def:true) Show GUI?
draw_all_raw_feats	= true			// [bool] (def:false) Draw raw keypoints
draw_lr_pairings	= true			// [bool] (def:false) Draw stereo matches
draw_tracking		= false			// [bool] (def:true) Draw tracking information

[GENERAL]
vo_use_matches_ids	= true			// [bool] (def:false) Set/Unset tracking of the IDs of the matches through time
vo_save_files		= false			// [bool] (def:false) Set/Unset storage of some information of the system in files as the process runs
vo_debug			= false			// [bool] (def:false) Set/Unset showing application debugging info
vo_pause_it			= false			// [bool] (def:false) Set/Unset pausing the application after each iteration
vo_out_dir			= out_vo_dir	// [string] (def:'out') Sets the output directory for saving debug files
;vo_verbosity		= 0

camera_pose_on_robot= [1,0,0,1,0,0]	// [vector] (def:all_zeros) Sets the pose of the camera on the robot

;-----------------------------
; Application options
;-----------------------------
[APP_OPTIONS]
out_dir 		= out_app 			// [string] (def:'') -- Application output folder
debug 			= false 			// [bool] (def:false) -- Store and show some debugging information
show3D 			= true				// [bool] (def:false) -- Show information GUI
enable_logger 	= false 			// [bool] (def:false) -- Enable time logger for certain operations (for debugging)
verbose_level	= 1 				// [int] (def:0) -- Verbose level: [0] None ; [1] Important ; [2] More info

pause_at_each_iteration = false 	// [bool] (def:false) -- Pause application after each iteration
pause_after_show_op 	= true 	// [bool] (def:false) -- Pause application after showing parameters

;max_num_kfs 	= 5000				// [int] (def:0 -unlimited-) -- Maximum number of KFs to be inserted in the system (app will finish when reached)

; capture_source	= 1 				// [int] (def:1) -- Image capture source: [0] Rawlog file (TO DO); [1] Image folder [NOTE: FILL 'IMG_SOURCE' SECTION]

; from_step 		= 0					// [int] (def:0) -- Number of the first frame to process
; to_step 		= 0 				// [int] (def:0 -unlimited-) -- Number of the last frame to process

;-----------------------------
; Image source parameters
;-----------------------------
[IMG_SOURCE]
;image_dir_url	= dataset0			// [string] (def:'') -- Image folder path
;left_format 	= image_0\%06d.png	// [string] (def:'') -- C-style format for the 'left image' filenames
;right_format	= image_1\%06d.png	// [string] (def:'') -- C-style format for the 'left image' filenames
;start_index		= 0					// [int] (def:0) -- Starting frame index to be processed
;end_index		= 1100				// [int] (def:0 -unlimited-) -- Last frame index to be processed [USE THIS INSTEAD OF 'from_step' and 'to_step' FOR IMAGE FOLDERS]

;-----------------------------
; Sparser Relative Bundle Adjustment
;-----------------------------
[SRBA_GENERAL]
voc_filename			= voc.yml.gz // [string] (def:'') -- ORB data vocabulary filename
pause_after_show_op 	= true 		// [bool] (def:false) -- Pause after showing application options

srba_max_tree_depth		= 4			// [int] (def:3) -- Maximum depth to keep spanning trees
srba_max_optimize_depth = 5			// [int] (def:3) -- Maximum depth to optimize the graph
srba_submap_size		= 10		// [int] (def:15) -- Number of KFs within submaps
srba_use_robust_kernel 	= true 		// [bool] (def:true) -- Use robust kernel for optimization
srba_use_robust_kernel_stage1 = true //[bool] (def:true) -- Use robust kernel for optimization in SRBA stage 1
srba_kernel_param 		= 1.5		// [double] (def:3.0) -- Pseudo-huber kernel param for least-squares optimization.

[SRBA_DETECT]
n_feats					= 500		// [int] (def:500) -- Desired number of feats to be detected in the images (NOTE: will overwrite the visual odometer equivalent parameter)
orb_adaptive_fast_th 	= true		// [bool] (def:false) -- Set adaptive FAST threshold (within ORB method) according to the number of detected keypoints [NOT USED WITH OPENCV<3.0]
detect_fast_th			= 20		// [int] (def:5) -- Initial FAST Threshold for ORB keypoints (will be adaptad if 'orb_adaptive_fast_th' is true)
adaptive_th_min_matches = 100		// [int] (def:100) -- Minimum number of matches to adapt FAST threshold for ORB [NOT USED WITH OPENCV<3.0]

[SRBA_DATA_ASSOCIATION]
da_stage2_method	= 3 			// [int] (def:2) -- Method for filtering outliers during second stage of DA: [0] None ; [1] Fundamental Matrix; [2] Change in pose only;  [3] Both
residual_th 		= 50			 // [double] (def:) -- Filtering by change in pose (residual threshold)
max_orb_distance_da = 60			// [double] (def:60) -- Maximum ORB distance for data association 
max_y_diff_epipolar = 2.0			// [double] (def:1.5) -- Filtering by fundamental matrix (epipolar threshold)
ransac_fit_prob 	= 0.95			// [double] (def:0.95) -- Filtering by fundamental matrix (RANSAC fit threshold)

[SRBA_KF_CREATION]
max_rotation		= 25			// [double] (def:15) -- Rotation limit for checking new KFs (in degrees)
max_translation		= 2.0			// [double] (def:0.3) -- Translation limit for checking new KFs (in meters)
updated_matches_th	= 60			// [int] (def:50) -- Minimum number of tracked matches to insert a new KF after DA
up_matches_th_plus	= 25			// [int] (def:25) -- This+'updated_matches_th' sets the minimum number of tracked matches to define new KF checking (geometrical) limits
lc_distance			= 10				// [int] (def:2) -- Minimum distance between KFs to consider a loop closure
vo_id_tracking_th	= 40			// [int] (def:40) -- Minimum number of tracked matches (from VO) to perform a new KF check
use_initial_pose	= true 			// [bool] (def:true) -- Use an initial estimation of the position of this KF taken from the odometry

;-----------------------------
; Camera parameters
;-----------------------------
[CAMERA_LEFT]
resolution 	= [752 480]
cx			= 457.296
cy			= 248.375
fx			= 458.654
fy			= 367.215
dist		= [-0.28340811, 0.07395907, 0.00019359, 1.76187114e-05, 0.0]

[CAMERA_RIGHT]
resolution 	= [752 480]
cx			= 379.999
cy			= 255.238
fx			= 457.587
fy			= 456.134
dist		= [-0.28368365, 0.07451284, -0.00010473, -3.555907e-05, 0.0]

[CAMERA_LEFT2RIGHT_POSE]
pose_quaternion = [ 47.90639384423901 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000]
